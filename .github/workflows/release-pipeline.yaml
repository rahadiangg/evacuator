name: release-pipeline

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'  # Matches v1.0.0, v1.2.3, v1.0.0-alpha, etc.

permissions:
  contents: write  # Changed to write for creating releases

env:
  REGISTRY: docker.io
  IMAGE_NAME: rahadiangg/evacuator

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Extract version from tag
        id: extract-version
        run: |
          # Remove 'v' prefix from tag to get version (e.g., v1.2.3 -> 1.2.3)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          go build -ldflags="-s -w" -o dist/evacuator ./cmd/evacuator
          
      - name: Generate binary checksum
        run: |
          cd dist
          sha256sum evacuator > evacuator.sha256

      - name: Create zip archive for release
        run: |
          cd dist
          zip evacuator-v${{ steps.extract-version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip evacuator

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: evacuator-binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/evacuator
            dist/evacuator.sha256

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: evacuator-release-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/evacuator-v${{ steps.extract-version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip

  docker-build-per-arch:
    runs-on: ubuntu-latest
    needs: build-binaries
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            platform: linux/amd64
          - goos: linux
            goarch: arm64
            platform: linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: evacuator-binary-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./dist

      - name: Verify binary checksum
        run: |
          cd dist
          sha256sum -c evacuator.sha256

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push per-architecture image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ needs.build-binaries.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=${{ matrix.platform }}
            TARGETPLATFORM=${{ matrix.platform }}
          target: prebuilt

  docker-manifest:
    runs-on: ubuntu-latest
    needs: [build-binaries, docker-build-per-arch]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          VERSION="${{ needs.build-binaries.outputs.version }}"
          
          # Create multi-arch image using imagetools
          docker buildx imagetools create \
            --tag ${{ env.IMAGE_NAME }}:${VERSION} \
            --tag ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:${VERSION}-linux-amd64 \
            ${{ env.IMAGE_NAME }}:${VERSION}-linux-arm64

      - name: Inspect multi-arch image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ needs.build-binaries.outputs.version }}

  create-release:
    runs-on: ubuntu-latest
    needs: [build-binaries, docker-manifest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: evacuator-release-*
          path: release-assets

      - name: Organize release assets
        run: |
          mkdir -p dist
          find release-assets -name "*.zip" -exec cp {} dist/ \;
          ls -la dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: dist/*.zip
