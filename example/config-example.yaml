# Example configuration file for evacuator
# This shows the actual YAML structure supported by the application
# Most users should use environment variables instead of config files
#
# VIPER CONFIGURATION SYSTEM:
# The application now uses Viper for configuration management, providing:
# - Automatic precedence: CLI flags > env vars > config file > defaults
# - Support for multiple config formats (YAML, JSON, TOML, etc.)
# - Environment variable prefix support (EVACUATOR_*)
# - Automatic type conversion and validation
# - No manual merging required between config sources

app:
  dry_run: false   # Set to true to simulate actions without actually draining nodes
  node_name: ""    # The node name to monitor (auto-detected from NODE_NAME env var or cloud provider)

monitoring:
  provider: ""              # Manually specify cloud provider: alibaba (ALWAYS takes priority)
  auto_detect: true         # Auto-detect when provider is empty (ignored when provider is set)
  event_buffer_size: 100    # Buffer size for termination event channels
  poll_interval: "5s"       # How often to check for spot termination events (3s-30s, default: 5s)
  provider_timeout: "3s"    # Timeout for cloud provider API calls (default: 3s)
  provider_retries: 3       # Number of retries for failed cloud provider requests (default: 3)

# Note: The application automatically detects Alibaba Cloud by checking its metadata service
# Provider configurations use built-in defaults - remove providers section to use defaults

handlers:
  log:
    enabled: true
  
  kubernetes:
    enabled: true
    drain_timeout_seconds: 90      # 1.5 minutes - suitable for 2-minute spot termination notice
    force_eviction_after: "90s"    # Force evict pods after 1.5 minutes
    skip_daemon_sets: true
    delete_empty_dir_data: false
    ignore_pod_disruption: true    # Ignore PDBs during emergency evacuation
    grace_period_seconds: 10       # Shorter grace period for faster evacuation

  telegram:
    enabled: false               # Disabled by default, requires manual configuration
    bot_token: ""               # Telegram bot token (get from @BotFather)
    chat_id: ""                 # Chat ID where to send notifications
    timeout: "10s"              # HTTP request timeout for Telegram API
    send_raw: false             # Send raw event data in addition to formatted message

# Telegram Setup Guide:
# 1. Create bot: Message @BotFather, send /newbot, save the token
# 2. Get chat ID: Add bot to chat, send message, visit:
#    https://api.telegram.org/bot<YOUR_TOKEN>/getUpdates
# 3. For security, use environment variables instead:
#    TELEGRAM_BOT_TOKEN="bot123456:ABC..." TELEGRAM_CHAT_ID="-100123..."
#
# send_raw option: When enabled, ALWAYS sends raw JSON data as PRIORITY #1
# even if formatted message fails. Uses multi-layer emergency fallbacks to 
# guarantee incident data is captured. Critical for production monitoring
# where missing termination events could cause data loss or service disruption.

# Kubernetes client configuration
kubernetes:
  kubeconfig: ""       # Path to kubeconfig file (empty for default locations)
  in_cluster: true     # Use in-cluster configuration when running as DaemonSet

# About Kubernetes Configuration:
# - in_cluster: true  = Use ServiceAccount (recommended for DaemonSet deployment)
# - in_cluster: false = Use kubeconfig file (for testing/development)
# 
# About Node Name Configuration:
# - app.node_name: Auto-detected from APP_NODE_NAME or NODE_NAME environment variable
# - In DaemonSet deployments, NODE_NAME is typically set using downward API
# - Fallback: Uses cloud provider instance ID if no environment variable is set
# - This is the core node that the evacuator monitors for termination events

logging:
  level: "info"        # debug, info, warn, error
  format: "json"       # json, text  
  output: "stdout"     # stdout, stderr, or file path

# VIPER ENVIRONMENT VARIABLE MAPPINGS:
# 
# üÜï CONSISTENT FORMAT (matches YAML structure exactly):
#   APP_DRY_RUN=true                                         # app.dry_run
#   APP_NODE_NAME="node-1"                                   # app.node_name
#   MONITORING_PROVIDER=alibaba                              # monitoring.provider  
#   MONITORING_AUTO_DETECT=false                             # monitoring.auto_detect
#   MONITORING_EVENT_BUFFER_SIZE=200                         # monitoring.event_buffer_size
#   MONITORING_POLL_INTERVAL=5s                              # monitoring.poll_interval
#   MONITORING_PROVIDER_TIMEOUT=3s                           # monitoring.provider_timeout
#   MONITORING_PROVIDER_RETRIES=3                            # monitoring.provider_retries
#   HANDLERS_LOG_ENABLED=true                                # handlers.log.enabled
#   HANDLERS_KUBERNETES_ENABLED=true                         # handlers.kubernetes.enabled
#   HANDLERS_KUBERNETES_DRAIN_TIMEOUT_SECONDS=90             # handlers.kubernetes.drain_timeout_seconds
#   HANDLERS_KUBERNETES_FORCE_EVICTION_AFTER=90s             # handlers.kubernetes.force_eviction_after
#   HANDLERS_KUBERNETES_SKIP_DAEMON_SETS=true                # handlers.kubernetes.skip_daemon_sets
#   HANDLERS_KUBERNETES_DELETE_EMPTY_DIR_DATA=false          # handlers.kubernetes.delete_empty_dir_data
#   HANDLERS_KUBERNETES_IGNORE_POD_DISRUPTION=true           # handlers.kubernetes.ignore_pod_disruption
#   HANDLERS_KUBERNETES_GRACE_PERIOD_SECONDS=10              # handlers.kubernetes.grace_period_seconds
#   HANDLERS_TELEGRAM_ENABLED=true                           # handlers.telegram.enabled
#   HANDLERS_TELEGRAM_BOT_TOKEN="bot123456:ABC-DEF"          # handlers.telegram.bot_token
#   HANDLERS_TELEGRAM_CHAT_ID="-100123456789"                # handlers.telegram.chat_id
#   HANDLERS_TELEGRAM_TIMEOUT=10s                            # handlers.telegram.timeout
#   HANDLERS_TELEGRAM_SEND_RAW=false                         # handlers.telegram.send_raw
#   KUBERNETES_KUBECONFIG="/path/to/kubeconfig"              # kubernetes.kubeconfig
#   KUBERNETES_IN_CLUSTER=true                               # kubernetes.in_cluster
#   LOGGING_LEVEL=debug                                      # logging.level
#   LOGGING_FORMAT=text                                      # logging.format
#   LOGGING_OUTPUT=stdout                                    # logging.output
#
# üè∑Ô∏è PREFIXED FORMAT (with EVACUATOR_ prefix):
#   EVACUATOR_APP_DRY_RUN=true                               # app.dry_run
#   EVACUATOR_APP_NODE_NAME="node-1"                         # app.node_name
#   EVACUATOR_MONITORING_PROVIDER=alibaba                    # monitoring.provider
#   EVACUATOR_HANDLERS_LOG_ENABLED=true                      # handlers.log.enabled
#   EVACUATOR_HANDLERS_TELEGRAM_ENABLED=true                 # handlers.telegram.enabled
#   EVACUATOR_KUBERNETES_IN_CLUSTER=true                     # kubernetes.in_cluster
#   EVACUATOR_LOGGING_LEVEL=debug                            # logging.level
#   (All above variables work with EVACUATOR_ prefix)
#
# Both formats work simultaneously! Environment variables will override file values.
#
# Configuration file override:
#   CONFIG_FILE="/path/to/custom/config.yaml"

# PRECEDENCE ORDER (Viper automatic handling):
# 1. CLI flags (if implemented)
# 2. Environment variables
# 3. Configuration file values
# 4. Default values
#
# This means environment variables will always override file values,
# making it safe to use config files with environment-specific overrides.
